//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\Response\VSAR\NXProject\AppRoot\application\Vsar_NewProject.hpp
//
//        This file was generated by the NX Block Styler
//        Created by: wujif
//              Version: NX 7.5
//              Date: 02-19-2011  (Format: mm-dd-yyyy)
//              Time: 17:32
//
//==============================================================================

#ifndef VSAR_INIT_UTILS_H_INCLUDED
#define VSAR_INIT_UTILS_H_INCLUDED

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include <string>
#include <boost/scope_exit.hpp>
#include <libvsarinit_exports.h>

namespace Vsar
{

#if defined _WIN32
#define  PATH_DELIM             '\\'
#elif defined _WIN64
#define  PATH_DELIM             '\\'
#else
#define  PATH_DELIM             '/'
#endif

#define DELETE_CLASS_POINTER(ptr) \
    BOOST_SCOPE_EXIT((&ptr)) \
    { \
    delete ptr; \
    ptr = NULL; \
} \
    BOOST_SCOPE_EXIT_END

#ifndef MSGTXT
/*  
    This macro is wrapped around UG strings that need to be converted to
    users' native languages (NLM).  Since some of these strings are present
    in the OM error reporting code, the definition needs to be in a file
    available to all UG code and to Infomanager code too.
*/
#define MSGTXT(s) s
#endif

#ifndef N_ELEMENTS
    /*
 *  Macro N_ELEMENTS which determines the number of elements in an
 *  array of any type.  Example usage:
 *    qsort(list, N_ELEMENTS(list), sizeof(list[0]), compare);
 *    for (indx=0; indx<N_ELEMENTS(list); indx++) {
 */
#define N_ELEMENTS(array) ((unsigned int)(sizeof(array)/sizeof(array[0])))
#endif

    VSARINITEXPORT std::string GetInstallPath();

    VSARINITEXPORT void CopyFile(const std::string &fromPath, const std::string &fromFileName,
                                 const std::string &toPath,   const std::string &toFileName);

    VSARINITEXPORT void CopyDirectory(const std::string &fromPath, const std::string &toPath);

    VSARINITEXPORT int  LoadResult(const std::string &resultPathName);
}

#endif //VSAR_INIT_UTILS_H_INCLUDED
