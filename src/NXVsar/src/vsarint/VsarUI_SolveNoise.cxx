//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\Response\VSAR\NXProject\AppRoot\application\Solve.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: wujif
//              Version: NX 7.5
//              Date: 05-23-2011  (Format: mm-dd-yyyy)
//              Time: 20:48 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include <uf_defs.h>
#include <VsarUI_SolveNoise.hxx>

#include <boost/foreach.hpp>

#include <uf_object_types.h>
#include <uf_ui_types.h>

#include <NXOpen/UI.hxx>
#include <NXOpen/Point.hxx>
#include <NXOpen/NXMessageBox.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_PropertyList.hxx>

#include <Vsar_SolveOperation.hxx>
//#include <Vsar_Names.hxx>
#include <Vsar_Solution.hxx>

using namespace NXOpen;
using namespace NXOpen::BlockStyler;
using namespace Vsar;

namespace VsarUI
{
    //SelectPoint::SelectPoint() : BaseDialog("SelectPoint.dlx")
    //{
    //}

    //SelectPoint::~SelectPoint()
    //{
    //}

    ////------------------------------------------------------------------------------
    ////Callback Name: initialize_cb
    ////------------------------------------------------------------------------------
    //void SelectPoint::InitializeCb()
    //{
    //    try
    //    {
    //        CompositeBlock *pTopBlock = m_theDialog->TopBlock();

    //        m_selectPoint         = pTopBlock->FindBlock("selectPoint");
    //    }
    //    catch(std::exception& ex)
    //    {
    //        //---- Enter your exception handling code here -----
    //        theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
    //    }
    //}

    //int SelectPoint::ApplyCb()
    //{
    //    return 0;
    //}

    //int SelectPoint::UpdateCb(NXOpen::BlockStyler::UIBlock* block)
    //{
    //    return 0;
    //}

    //------------------------------------------------------------------------------
    // Constructor for NX Styler class
    //------------------------------------------------------------------------------
    SolveNoise::SolveNoise() : BaseCompDialog("SolveNoise.dlx", new NoiseSolution())
    {
    }

    //------------------------------------------------------------------------------
    // Destructor for NX Styler class
    //------------------------------------------------------------------------------
    SolveNoise::~SolveNoise()
    {
    }

    //------------------------------------------------------------------------------
    //Method name: Show_Solve
    //------------------------------------------------------------------------------
    void SolveNoise::ShowDialog()
    {
        boost::scoped_ptr<SolveNoise> pSolveDlg(new SolveNoise());

        try
        {
            // The following method shows the dialog immediately
            pSolveDlg->Show(BlockDialog::DialogModeEdit);
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    void SolveNoise::InitializeCb()
    {
        try
        {
            CompositeBlock *pTopBlock = m_theDialog->TopBlock();

            //m_outputPointList         = pTopBlock->FindBlock("outputPointList");
            m_selectPoints         = pTopBlock->FindBlock("selectPoints");
            //m_specifyPoint         = pTopBlock->FindBlock("specifyPoint");

            boost::scoped_ptr<PropertyList> pSelPtsPropList(m_selectPoints->GetProperties());

            std::vector<Selection::MaskTriple> maskTriples;

            maskTriples.push_back(Selection::MaskTriple(UF_point_type, UF_all_subtype, UF_UI_SEL_FEATURE_BODY));

            pSelPtsPropList->SetSelectionFilter("SelectionFilter",
                Selection::SelectionActionClearAndEnableSpecific, maskTriples);
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    void SolveNoise::DialogShownCb()
    {
        try
        {
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    int SolveNoise::FilterCb(NXOpen::BlockStyler::UIBlock *pBlock, NXOpen::TaggedObject *pSel)
    {
        //  TODO: Filter
        return UF_UI_SEL_ACCEPT;
    }

    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    int SolveNoise::ApplyCb()
    {
        int errorCode = 0;
        try
        {
            boost::scoped_ptr<PropertyList> pSelPtsPropList(m_selectPoints->GetProperties());

            std::vector<TaggedObject*>  selPts(pSelPtsPropList->GetTaggedObjectVector("SelectedObjects"));

            std::vector<Point*> outputPoints;

            outputPoints.reserve(selPts.size());
            BOOST_FOREACH(TaggedObject *pSelObj, selPts)
            {
                Point *pPoint = dynamic_cast<Point*>(pSelObj);

                if (pPoint)
                    outputPoints.push_back(pPoint);
            }

            SolveNoiseOperation        solveOper(outputPoints);

            solveOper.Execute();
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    int SolveNoise::UpdateCb(UIBlock* block)
    {
        try
        {
            if (block == m_selectPoints)
            {
            }
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }

    //bool SolveNoise::CanOutputElements() const
    //{
    //    boost::scoped_ptr<PropertyList> pHasElemsPropList(m_hasElemsOutput->GetProperties());

    //    return pHasElemsPropList->GetLogical("Value");
    //}

    //std::vector<TaggedObject*> SolveNoise::GetOutputElements() const
    //{
    //    boost::scoped_ptr<PropertyList> pOutputElemsPropList(m_outputElements->GetProperties());

    //    return pOutputElemsPropList->GetTaggedObjectVector("SelectedObjects");
    //}

    //bool SolveNoise::CanOutputNodes() const
    //{
    //    boost::scoped_ptr<PropertyList> pHasNodesPropList(m_hasNodesOutput->GetProperties());

    //    return pHasNodesPropList->GetLogical("Value");
    //}

    //std::vector<TaggedObject*> SolveNoise::GetOutputNodes() const
    //{
    //    boost::scoped_ptr<PropertyList> pOutputNodesPropList(m_outputNodes->GetProperties());

    //    return pOutputNodesPropList->GetTaggedObjectVector("SelectedObjects");
    //}

    //bool SolveNoise::CanOutputNodesForNoise() const
    //{
    //    boost::scoped_ptr<PropertyList> pHasNoiseNodesPropList(m_hasNoiseNodeOutput->GetProperties());

    //    return pHasNoiseNodesPropList->GetLogical("Value");
    //}
}
