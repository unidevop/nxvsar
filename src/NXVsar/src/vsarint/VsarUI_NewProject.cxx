//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\Response\VSAR\NXProject\AppRoot\application\Vsar_NewProject.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: wujif
//              Version: NX 7.5
//              Date: 02-19-2011  (Format: mm-dd-yyyy)
//              Time: 17:32 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include <uf_defs.h>
#include <VsarUI_NewProject.hxx>

#include <boost/scope_exit.hpp>
#include <boost/scoped_ptr.hpp>

#include <uf_part.h>
#include <uf_assem.h>

#include <NXOpen/UI.hxx>
#include <NXOpen/NXMessageBox.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_PropertyList.hxx>

#include <Vsar_Project.hxx>
#include <Vsar_Utils.hxx>

using namespace NXOpen;
using namespace NXOpen::BlockStyler;
using namespace Vsar;

//------------------------------------------------------------------------------
// Declaration of global variables
//------------------------------------------------------------------------------
namespace VsarUI
{
    //------------------------------------------------------------------------------
    // Constructor for NX Styler class
    //------------------------------------------------------------------------------
    NewProject::NewProject() : BaseDialog("NewProject.dlx")
    {
    }

    //------------------------------------------------------------------------------
    // Destructor for NX Styler class
    //------------------------------------------------------------------------------
    NewProject::~NewProject()
    {
    }

//#if CALLBACK
    //------------------------------------------------------------------------------
    //Method name: Show_Vsar_NewProject
    //------------------------------------------------------------------------------
    void NewProject::ShowDialog()
    {
        tag_t  tTempPrt = NULL_TAG;

        if (UF_ASSEM_ask_work_part() == NULL_TAG)
        {
            const char *strPrtName = "tempPart";

            UF_CALL(UF_PART_new(strPrtName, 1, &tTempPrt));
        }

        BOOST_SCOPE_EXIT((&tTempPrt))
        {
            if (tTempPrt != NULL_TAG)
                UF_CALL(UF_PART_close(tTempPrt, 0, 1));
        }
        BOOST_SCOPE_EXIT_END

        boost::scoped_ptr<NewProject> pNewDialog(new NewProject());

        try
        {
            // The following method shows the dialog immediately
            pNewDialog->Show(BlockDialog::DialogModeEdit);
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }
//#endif//CALLBACK

    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    void NewProject::InitializeCb()
    {
        CompositeBlock *pTopBlock = m_theDialog->TopBlock();

        try
        {
            //m_prjGroup = pTopBlock->FindBlock("prjGroup");
            m_prjName = pTopBlock->FindBlock("prjName");
            m_prjPath = pTopBlock->FindBlock("prjPath");
            //m_group = pTopBlock->FindBlock("group");
            m_prjType = pTopBlock->FindBlock("prjType");
            m_typeImg = pTopBlock->FindBlock("typeImg");
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    void NewProject::DialogShownCb()
    {
        try
        {
            boost::scoped_ptr<PropertyList> pPrjPropList(m_prjType->GetProperties());

            pPrjPropList->SetEnum("Value", 0);

            UpdateCb(m_prjType);
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    int NewProject::ApplyCb()
    {
        int errorCode = 0;
        try
        {
            std::string  prjName = m_prjName->GetProperties()->GetString("Value").GetUTF8Text();
            std::string  prjPath = m_prjPath->GetProperties()->GetString("Path").GetUTF8Text();
            Project::ProjectType  prjType(static_cast<Project::ProjectType>(m_prjType->GetProperties()->GetEnum("Value")));

            Project::New(prjName, prjPath, prjType);
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    int NewProject::UpdateCb(UIBlock* block)
    {
        try
        {
            if(block == m_prjName)
            {
                // TODO: Validate the name
            }
            else if(block == m_prjPath)
            {
                // TODO: Validate the path
            }
            else if(block == m_prjType)
            {
                boost::scoped_ptr<PropertyList> pPrjPropList(m_prjType->GetProperties());
                boost::scoped_ptr<PropertyList> pImgPropList(m_typeImg->GetProperties());

                switch (pPrjPropList->GetEnum("Value"))
                {
                case Project::ProjectType_Bridge:
                    pImgPropList->SetString("Bitmap", "bitmap/bridge.bmp");
                    break;
                case Project::ProjectType_Selmi_Infinite:
                    pImgPropList->SetString("Bitmap", "bitmap/selmi.bmp");
                    break;
                case Project::ProjectType_Tunnel:
                    pImgPropList->SetString("Bitmap", "bitmap/tunnel.bmp");
                    break;
                default:
                    break;
                }
            }
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }
}
