//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\CAE\Response\VSAR-DEV\NXProject\AppRoot\application\SlabSettings.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: Joseph
//              Version: NX 7.5
//              Date: 05-08-2011  (Format: mm-dd-yyyy)
//              Time: 14:00 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include <uf_defs.h>
#include <VsarUI_SlabSettings.hxx>

#include <NXOpen/UI.hxx>
#include <NXOpen/NXMessageBox.hxx>

#include <Vsar_Component.hxx>
#include <Vsar_Init_Utils.hxx>

#include <Vsar_Slab.hxx>
#include <Vsar_Names.hxx>

using namespace NXOpen;
using namespace NXOpen::BlockStyler;
using namespace Vsar;

namespace VsarUI
{
    //static CompAttrInfo attrExpInfo[] =
    //{
    //    {SLAB_SUPPORT_COUNT_ID_NAME,    SLAB_PRT_PART_NAME,       SLAB_SUPPORT_COUNT_EXP_NAME},

    //    {FASTENER_STIFFNESS_ID_NAME,    RAIL_SLAB_FEM_PART_NAME, RAIL_FASTENER_STIFFNESS_EXP_NAME},
    //    {FASTENER_DAMPING_ID_NAME,      RAIL_SLAB_FEM_PART_NAME, RAIL_FASTENER_DAMPING_EXP_NAME},
    //    {MASS_RATIO_ID_NAME,            RAIL_SLAB_FEM_PART_NAME, SLAB_MASS_RATIO_EXP_NAME},
    //    {STIFFNESS_RATIO_ID_NAME,       RAIL_SLAB_FEM_PART_NAME, SLAB_STIFFNESS_RATIO_EXP_NAME},
    //    {DAMPING_RATIO_ID_NAME,         RAIL_SLAB_FEM_PART_NAME, SLAB_DAMPING_RATIO_EXP_NAME},
    //    {ELASTIC_MODULUS_ID_NAME,       RAIL_SLAB_FEM_PART_NAME, SLAB_ELASTIC_MODULUS_EXP_NAME},
    //    {POISSON_RATIO_ID_NAME,         RAIL_SLAB_FEM_PART_NAME, SLAB_POISSON_RATIO_EXP_NAME},
    //};

    //------------------------------------------------------------------------------
    // Constructor for NX Styler class
    //------------------------------------------------------------------------------
    SlabSettings::SlabSettings() : BaseCompDialog("SlabSettings.dlx",
                                                  new Slab)
    {
    }

    //------------------------------------------------------------------------------
    // Destructor for NX Styler class
    //------------------------------------------------------------------------------
    SlabSettings::~SlabSettings()
    {
    }

    void SlabSettings::ShowDialog()
    {
        boost::scoped_ptr<SlabSettings> pRailSettingDlg(new SlabSettings());

        try
        {
            // The following method shows the dialog immediately
            pRailSettingDlg->Show(BlockDialog::DialogModeEdit);
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    void SlabSettings::InitializeCb()
    {
        BaseCompDialog::InitializeCb();

        try
        {
            CompositeBlock *pTopBlock = m_theDialog->TopBlock();

            //grpGeometry = pTopBlock->FindBlock("grpGeometry");
            m_length = pTopBlock->FindBlock("length");
            //m_eleSize = pTopBlock->FindBlock("eleSize");
            //counts = pTopBlock->FindBlock("counts");
            m_supportCnt = pTopBlock->FindBlock(SLAB_SUPPORT_COUNT_ID_NAME);

            //grpMaterial = pTopBlock->FindBlock("grpMaterial");
            m_fastenerStiffness = pTopBlock->FindBlock(FASTENER_STIFFNESS_ID_NAME);
            m_fastenerDamping = pTopBlock->FindBlock(FASTENER_DAMPING_ID_NAME);
            m_massRatio = pTopBlock->FindBlock(MASS_RATIO_ID_NAME);
            m_stiffnessRatio = pTopBlock->FindBlock(STIFFNESS_RATIO_ID_NAME);
            m_dampingRatio = pTopBlock->FindBlock(DAMPING_RATIO_ID_NAME);
            m_elasticModulus = pTopBlock->FindBlock(ELASTIC_MODULUS_ID_NAME);
            m_poissonRatio = pTopBlock->FindBlock(POISSON_RATIO_ID_NAME);
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    void SlabSettings::DialogShownCb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    //int SlabSettings::ApplyCb()
    //{
    //    int errorCode = 0;
    //    try
    //    {
    //        //---- Enter your callback code here -----
    //    }
    //    catch(std::exception& ex)
    //    {
    //        //---- Enter your exception handling code here -----
    //        errorCode = 1;
    //        theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
    //    }
    //    return errorCode;
    //}

    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    int SlabSettings::UpdateCb(UIBlock* block)
    {
        try
        {
            if(block == m_length)
            {
                //---------Enter your code here-----------
            }
            //else if(block == m_eleSize)
            //{
            //    //---------Enter your code here-----------
            //}
            //else if(block == counts)
            //{
            ////---------Enter your code here-----------
            //}
            else if(block == m_supportCnt)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_fastenerStiffness)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_fastenerDamping)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_massRatio)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_stiffnessRatio)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_dampingRatio)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_elasticModulus)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_poissonRatio)
            {
                //---------Enter your code here-----------
            }
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }
}
