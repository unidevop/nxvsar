//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\Response\VSAR\NXProject\AppRoot\application\Vsar_BaseDialog.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: wujif
//              Version: NX 7.5
//              Date: 02-19-2011  (Format: mm-dd-yyyy)
//              Time: 17:32 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include <uf_defs.h>
#include <VsarUI_BaseDialog.hxx>

#include <uf_ui_types.h>

#include <NXOpen/Session.hxx>
#include <NXOpen/UI.hxx>
#include <NXOpen/NXMessageBox.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXException.hxx>

using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Declaration of global variables
//------------------------------------------------------------------------------
namespace VsarUI
{
//    BaseDialog *theVsar_BaseDialog;

    //------------------------------------------------------------------------------
    // Initialize static variables
    //------------------------------------------------------------------------------
    Session* BaseDialog::s_theSession = NULL;
    UI*      BaseDialog::s_theUI      = NULL;

    //------------------------------------------------------------------------------
    // Constructor for NX Styler class
    //------------------------------------------------------------------------------
    BaseDialog::BaseDialog(const std::string &dialogName)
    {
        try
        {
            // Initialize the NX Open C++ API environment
            s_theSession = Session::GetSession();
            s_theUI      = UI::GetUI();

            m_theDialog.reset(s_theUI->CreateDialog(dialogName.c_str()));

            // Registration of callback functions
            m_theDialog->AddApplyHandler(make_callback(this, &BaseDialog::ApplyCb));
            m_theDialog->AddOkHandler(make_callback(this, &BaseDialog::OkCb));
            m_theDialog->AddCancelHandler(make_callback(this, &BaseDialog::CancelCb));
            m_theDialog->AddUpdateHandler(make_callback(this, &BaseDialog::UpdateCb));
            m_theDialog->AddFilterHandler(make_callback(this, &BaseDialog::FilterCb));
            m_theDialog->AddInitializeHandler(make_callback(this, &BaseDialog::InitializeCb));
            m_theDialog->AddFocusNotifyHandler(make_callback(this, &BaseDialog::FocusNotifyCb));
            m_theDialog->AddKeyboardFocusNotifyHandler(make_callback(this, &BaseDialog::KeyboardFocusNotifyCb));
            m_theDialog->AddDialogShownHandler(make_callback(this, &BaseDialog::DialogShownCb));
        }
        catch(std::exception&)
        {
            //---- Enter your exception handling code here -----
            throw;
        }
    }

    //------------------------------------------------------------------------------
    // Destructor for NX Styler class
    //------------------------------------------------------------------------------
    BaseDialog::~BaseDialog()
    {
    }

    int BaseDialog::Show(BlockDialog::DialogMode dialogMode)
    {
        try
        {
            m_theDialog->Show(dialogMode);
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    void BaseDialog::DialogShownCb()
    {
        try
        {

        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    int BaseDialog::ApplyCb()
    {
        int errorCode = 0;
        try
        {
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
        return errorCode;
    }

    int BaseDialog::CancelCb()
    {
        int errorCode = 0;
        try
        {
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    int BaseDialog::UpdateCb(UIBlock* block)
    {
        try
        {

        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    int BaseDialog::OkCb()
    {
        int errorCode = 0;
        try
        {
            errorCode = ApplyCb();
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
        return errorCode;
    }

    int BaseDialog::FilterCb(NXOpen::BlockStyler::UIBlock *pBlock, NXOpen::TaggedObject *pSel)
    {
        return UF_UI_SEL_ACCEPT;
    }

    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
    //------------------------------------------------------------------------------
    void BaseDialog::FocusNotifyCb(UIBlock* block, bool focus)
    {
        try
        {
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //This callback is executed when block which can receive keyboard entry, receives the focus.
    //------------------------------------------------------------------------------
    void BaseDialog::KeyboardFocusNotifyCb(UIBlock* block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            s_theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

}
