//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\Response\VSAR\NXProject\AppRoot\application\TrainSettings.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: wujif
//              Version: NX 7.5
//              Date: 04-08-2011  (Format: mm-dd-yyyy)
//              Time: 21:59 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include <uf_defs.h>
#include <VsarUI_TrainSettings.hxx>

#include <NXOpen/UI.hxx>
#include <NXOpen/NXMessageBox.hxx>
//#include <NXOpen/BlockStyler_PropertyList.hxx>

//#include <NXOpen/Part.hxx>
//#include <NXOpen/PartCollection.hxx>
//#include <NXOpen/Expression.hxx>
//#include <NXOpen/ExpressionCollection.hxx>

//#include <boost/filesystem.hpp>
//#include <boost/scope_exit.hpp>
//#include <NXOpen/CAE_BaseFemPart.hxx>
//#include <NXOpen/CAE_BaseFEModel.hxx>

#include <Vsar_Project.hxx>

//#include <Vsar_Utils.hxx>
#include <Vsar_Train.hxx>


using namespace NXOpen;
using namespace NXOpen::BlockStyler;
using namespace Vsar;


namespace VsarUI
{
    //------------------------------------------------------------------------------
    // Constructor for NX Styler class
    //------------------------------------------------------------------------------
    TrainSettings::TrainSettings() : BaseCompDialog("TrainSettings.dlx", new Train)
    {
    }

    //------------------------------------------------------------------------------
    // Destructor for NX Styler class
    //------------------------------------------------------------------------------
    TrainSettings::~TrainSettings()
    {
    }

    //------------------------------------------------------------------------------
    //Method name: Show_TrainSettings
    //------------------------------------------------------------------------------
    void TrainSettings::ShowDialog()
    {
        boost::scoped_ptr<TrainSettings> pTrainSettingDlg(new TrainSettings());

        try
        {
            // The following method shows the dialog immediately
            pTrainSettingDlg->Show(BlockDialog::DialogModeEdit);
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    void TrainSettings::InitializeCb()
    {
        BaseCompDialog::InitializeCb();

        try
        {
            CompositeBlock *pTopBlock = m_theDialog->TopBlock();

            //m_grpCarriage = pTopBlock->FindBlock("grpCarriage");
            m_carriageCount = pTopBlock->FindBlock("carriageCount");
            m_carriageLength = pTopBlock->FindBlock("carriageLength");
            m_carriageDistance = pTopBlock->FindBlock("carriageDistance");
            m_carriageWeight = pTopBlock->FindBlock("carriageWeight");
            //m_grpBogie = pTopBlock->FindBlock("grpBogie");
            m_bogieLength = pTopBlock->FindBlock("bogieLength");
            m_halfBogieDistance = pTopBlock->FindBlock("halfBogieDistance");
            m_bogieWeight = pTopBlock->FindBlock("bogieWeight");
            //m_grpWheelSet = pTopBlock->FindBlock("grpWheelSet");
            m_wheelSetInterval = pTopBlock->FindBlock("wheelSetInterval");
            m_wheelSetWeight = pTopBlock->FindBlock("wheelSetWeight");
            m_wheelSetSglStgSusp = pTopBlock->FindBlock("wheelSetSglStgSusp");
            m_wheelSetSglStgSuspDamp = pTopBlock->FindBlock("wheelSetSglStgSuspDamp");
            m_wheelSetTwoStgSuspStiff = pTopBlock->FindBlock("wheelSetTwoStgSuspStiff");
            m_wheelSetTwoStgSuspDamp = pTopBlock->FindBlock("wheelSetTwoStgSuspDamp");
            m_wheelSetContactCoefElast = pTopBlock->FindBlock("wheelSetContactCoefElast");
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    void TrainSettings::DialogShownCb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    //int TrainSettings::ApplyCb()
    //{
    //    int errorCode = BaseCompDialog::ApplyCb();

    //    if (errorCode != 0)
    //        return errorCode;

    //    try
    //    {
    //       ;
    //    }
    //    catch(std::exception& ex)
    //    {
    //        //---- Enter your exception handling code here -----
    //        errorCode = 1;
    //        theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
    //    }
    //    return errorCode;
    //}

    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    int TrainSettings::UpdateCb(UIBlock* block)
    {
        try
        {
            if(block == m_carriageCount)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_carriageLength)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_carriageDistance)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_carriageWeight)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_bogieLength)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_halfBogieDistance)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_bogieWeight)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_wheelSetInterval)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_wheelSetWeight)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_wheelSetSglStgSusp)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_wheelSetSglStgSuspDamp)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_wheelSetTwoStgSuspStiff)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_wheelSetTwoStgSuspDamp)
            {
                //---------Enter your code here-----------
            }
            else if(block == m_wheelSetContactCoefElast)
            {
                //---------Enter your code here-----------
            }
        }
        catch(std::exception& ex)
        {
            //---- Enter your exception handling code here -----
            theUI->NXMessageBox()->Show("Block Styler", NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }

}
